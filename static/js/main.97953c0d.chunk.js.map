{"version":3,"sources":["component/CharInfo.js","component/List.js","App.js","serviceWorker.js","index.js"],"names":["CharInfo","props","state","expanded","species","openInfoBox","bind","closeInfoBox","this","setState","charInfo","map","url","Axios","get","then","result","data","info","className","onClick","res","key","Math","random","name","gender","birth_year","hair_color","eye_color","height","Component","List","people","p","App","getPeople","axios","response","console","log","results","slice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wRA8DeA,E,YA1DX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CAETC,UAAU,EACVC,QAAS,IAGb,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVL,E,2EAcfE,KAAKC,SAAS,CAAEN,UAAWK,KAAKN,MAAMC,a,qCAItCK,KAAKC,SAAS,CAAEN,UAAWK,KAAKN,MAAMC,a,0CAGrB,IAAD,OAChBK,KAAKP,MAAMS,SAASN,QAAQO,KAAI,SAAAC,GAC5B,OAAOC,IAAMC,IAAIF,GAAKG,MAAK,SAAAC,GACvB,EAAKP,SAAS,CACVL,QAAQ,GAAD,mBAAM,EAAKF,MAAME,SAAjB,CAA0BY,EAAOC,iB,+BAOpD,IAAMC,EAAOV,KAAKP,MAAMS,SAExB,IAAKF,KAAKN,MAAMC,SACZ,OAAO,uBAAGgB,UAAU,eAAeC,QAASZ,KAAKH,aAA1C,aAEX,IAAMD,EAAUI,KAAKN,MAAME,QAAQO,KAAI,SAAAU,GACnC,OACI,wBAAIC,IAAKC,KAAKC,UAAU,wCAAcH,EAAII,UAGlD,OACI,yBAAKN,UAAU,qBACX,uBAAGA,UAAU,iBAAiBC,QAASZ,KAAKD,cAA5C,aACA,4BACI,4BAAI,uCAAaW,EAAKQ,SACtB,4BAAI,2CAAiBR,EAAKS,aAC1B,4BAAI,2CAAiBT,EAAKU,aAC1B,4BAAI,0CAAgBV,EAAKW,YACzB,4BAAI,uCAAaX,EAAKY,OAAlB,QACH1B,Q,GApDE2B,aCqBFC,E,iLAnBb,IAAMC,EAASzB,KAAKP,MAAMgC,OAE1B,OACI,yBAAKd,UAAU,kBAEbc,EAAOtB,KAAI,SAACuB,GACR,OACE,yBAAKf,UAAU,eAAeG,IAAKY,EAAEtB,KACnC,wBAAIO,UAAU,aAAae,EAAET,MAC7B,kBAAC,EAAD,CAAUf,SAAUwB,a,GAXvBH,aCyCJI,E,YAvCb,WAAYlC,GAAQ,IAAD,8BAEjB,4CAAMA,KAGDC,MAAQ,CACX+B,OAAQ,IAIV,EAAKG,UAAY,EAAKA,UAAU9B,KAAf,gBAVA,E,yEAcN,IAAD,OACV,OAAO+B,IAAMvB,IAAI,+BAChBC,MAAK,SAACuB,GACLC,QAAQC,IAAIF,EAASrB,KAAKwB,SAE1B,EAAKhC,SAAU,CAACwB,OAAQK,EAASrB,KAAKwB,QAAQC,MAAM,EAAE,U,0CAQxDlC,KAAK4B,c,+BAEG,IACDH,EAAUzB,KAAKN,MAAf+B,OACP,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,CAAMc,OAAQA,S,GAlCJF,aCQEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.97953c0d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Axios from \"axios\"\r\n\r\nclass CharInfo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // So the list does not show yet!\r\n            expanded: false,\r\n            species: []\r\n        }\r\n\r\n        this.openInfoBox = this.openInfoBox.bind(this);\r\n        this.closeInfoBox = this.closeInfoBox.bind(this);\r\n    }\r\n\r\n    openInfoBox() {\r\n        this.setState({ expanded: !this.state.expanded })\r\n    }\r\n\r\n    closeInfoBox() {\r\n        this.setState({ expanded: !this.state.expanded })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.charInfo.species.map(url => {\r\n            return Axios.get(url).then(result => {\r\n                this.setState({\r\n                    species: [...this.state.species, result.data]\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const info = this.props.charInfo;\r\n\r\n        if (!this.state.expanded) {\r\n            return <p className=\"btn btn-info\" onClick={this.openInfoBox}>Show Info</p>\r\n        }\r\n        const species = this.state.species.map(res => {\r\n            return (\r\n                <li key={Math.random()}><h2>Species: {res.name}</h2></li>\r\n            );\r\n        });\r\n        return (\r\n            <div className=\"character-details\">\r\n                <p className=\"btn btn-danger\" onClick={this.closeInfoBox}>Hide Info</p>\r\n                <ul>\r\n                    <li><h2>Gender: {info.gender}</h2></li>\r\n                    <li><h2>Birth year: {info.birth_year}</h2></li>\r\n                    <li><h2>Hair color: {info.hair_color}</h2></li>\r\n                    <li><h2>Eye color: {info.eye_color}</h2></li>\r\n                    <li><h2>Height: {info.height} CM</h2></li>\r\n                    {species}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CharInfo\r\n","import React, { Component } from \"react\";\r\nimport CharInfo from \"./CharInfo\";\r\n\r\nclass List extends Component {\r\n    render() {\r\n        const people = this.props.people;\r\n\r\n        return (\r\n            <div className=\"grid-container\">\r\n              {\r\n              people.map((p) => {\r\n                  return (\r\n                    <div className=\"person-names\" key={p.url}>\r\n                      <h3 className=\"char-name\">{p.name}</h3> \r\n                      <CharInfo charInfo={p} /> \r\n                    </div>\r\n                  )\r\n                })\r\n              }\r\n            </div>\r\n            );\r\n        }\r\n      }\r\n      \r\n      export default List; ","import React, { Component } from 'react';\nimport axios from 'axios';\nimport List from './component/List';\n\nclass App extends Component {\n  constructor(props) {\n  //  super() calls the parent constructor\n    super(props);\n\n    // empty array, it gets filled when we get swapi api\n    this.state = {\n      people: []\n    }\n\n    // Bind into a function\n    this.getPeople = this.getPeople.bind(this);\n  }\n  \n  // Request to API to give us the data of people\n  getPeople() {\n    return axios.get(\"https://swapi.co/api/people\")\n    .then((response) => {\n      console.log(response.data.results);\n      // slice, slices the data down, in this case 5 people from star wars\n      this.setState( {people: response.data.results.slice(0,6)})\n      // console.log(\"species\",response.data.results.species);\n\n    })\n  }\n\n\n  componentDidMount() {\n    this.getPeople()\n  }\n  render() {\n    const {people} = this.state;\n    return (\n      <div className=\"App\">\n        <List people={people} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}